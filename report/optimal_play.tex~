\subsection{Introduction}

In this section, we will introduce an algorithm called the minimax algorithm which can play any positional game (and more genral games) in an optimal manner.

Quite clearly, any such claim is bound to be about an algorithm with performance issues.
There are common optimizations, such as alpha-beta pruning, which we also talk about.

The natural structure on which algorithmic play takes place is the game tree, as introduced in section \ref{subsec:gametree}.
A playing algorithm can then be seen as a search algorithm on the game tree.


\subsection{Optimal play}

What do we mean by ``optimal play''?

Clearly, a player cannot play optimally if he squanders an oppurtinity to win.
More precisely; if current position is a win for the moving player, then he must make a choice which is also a win for him.

Furthermore, if the moving player does not have any opportunity to win in the given position (i.e. none of the leaf-nodes in the tree attached to the current node contains a winning node for the moving player), but if he does have an opportinity to tie, he must still have an opportunity to tie after he makes his move.

Thus, if a player can play as above, then since the game can't go on forever, he will win if he can win, and if he can't win but he can tie, he will do that.

\subsection{The minimax algorithm}

\subsection{Optimization: alpha-beta pruning}
